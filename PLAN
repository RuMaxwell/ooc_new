OOC KERNEL

- Object module         <new.h>
- Interface module      <interface.h>
- Exception module      <throw.h>
- Smart pointer module  <sp.h>


Relationship

<sp.h>      <throw.h>
    \         /
     \       /
   <interface.h>
         |
      <new.h>


Module structure

sp.h {
    structs {
        owner
        shared_ptr
        weak_ptr
        unique_ptr
        auto_ptr
        ? async_shared
        ? mutex
    }
    macros & functions {
        [constructors]
        [destructors]
        void* deref(void* sp)
    }
}

throw.h {
    macros {
        try
        catch
        finally
        throw
    }
}

interface.h {
    structs {
        interface (descriptor, trivial struct)
    }
}

new.h {
    structs {
        class (object meta, type descriptor)
    }
    macros & functions {
        void*       new         (void* type, ...)
        void        delete      (void* this)
        class*      typeof      (void* this)
        const char* typename    (void* this)
        int         instanceof  (void* this, class* type)
        int         implements  (void* this, interface* i)

        [class interface]
    }
}


class {
    void*   (*constr)   (void* raw)
    void*   (*destr)    (void* this)
    
    size_t size
    char* name
    interface*  implements
}
